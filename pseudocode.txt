// Pseudocode

/* Class: Person */
class Person:
	private firstName: String
	private lastName: String
	private age: int
	
	// Constructor, no args
	public Person()
		// Nothing to see here
	
	// Constructor
	public Person(firstName: String, lastName, String, age: int)
		set this.firstName = firstName
		set this.lastName = lastName
		set this.age = age
	
	// Getters & Setters
	public setFirstName(firstName: String): void
		set this.firstName = firstName
	public getFirstName(): String
		return this.firstName
	
	public setLastName(lastName: String): void
		set this.lastName = lastName
	public getLastName(): String
		return this.lastName
	
	public setAge(age: int): void
		set this.age = age
	public getAge(): int
		return this.age
	
	// Override
	public toString(): String
		return "{lastName}, {firstName}: {age}"
	

/* Class: Last Name Comparator */
class LastNameDescendingComparator implements Comparator<Person>
	// Override
	public compare(person1: Person, person2: Person): int
		return person2.getLastName().compareTo(person1.getLastName())

/* Class: Age Comparator */
class AgeDescendingComparator implements Comparator<Person>
	// Override
	public compare(person1: Person, person2: Person): int
		return Integer.compare(person2.getAge(), person1.getAge())
	
/* Class: Sorting implementation (Quicksort) */
class QuickSort<T>
	public static quickSort(itemArray: T[], p: int, r: int, comparator: Comparator<T>): void
		// base case
		if (p >= r): return
		
		// Find new pivot 'q'
		set int q = partition(itemArray, p, r, comparator)
		
		// Recursive calls
		quickSort(itemArray, p, q, comparator) // Sort left side
		quickSort(itemArray, q + 1, r, comparator) // Sort right side
		
	
	private partition(itemArray: T[], p: int, r: int, comparator: Comparator<T>): void
		// Establish the pivot
		set T pivot = itemArray[r]
		
		// Max index on left side of the pivot
		set int i = p - 1
		for(int j = p; j < r; ++j):   // All elements are checked until the pivot is reached
			if comparator.compare(itemArray[j], pivot) <= 0:
				set i = i + 1
				// Swip swap value to the left side of the pivot
				set T tempVal = itemArray[i]
				set itemArray[i] = itemArray[j]
				set itemArray[j] = tempVal
		
		set T tempVal = itemArray[i + 1]
		set itemArray[i + 1] = itemArray[r]
		set itemArray[r] = tempVal
		
		return i + 1 // Return index of the next pivot
			
/* Interface: Queue ADT */
interface Queue<T>
	public enqueue(item: T): void
	public dequeue(): T
	public peek(): T
	public isEmpty(): boolean
	public printQueue(): void
	public iterator(): Iterator<T>
	public toArray(): T[]
	public fromArray(itemArray T[]): void

/* Class: Person Queue */
class PersonQueue implements Queue<Person>
	// Design decision: Either build a custom LL implementation, or import Java.util
	initialize LinkedList<Person> llQueue
	
	// Size counter
	intialize int size = 0
	
	public enqueue(person: Person): void
		llQueue.addLast(person)
		size = size + 1
	
	public dequeue(): Person
		// Safety check
		if llQueue.isEmpty() is True: throw exception
		
		set Person person = llQueue.getFirst()
		llQueue.removeFirst()
		size = size - 1
		
		return person
	
	public peek(): Person
		// Safety check
		if llQueue.isEmpty() is True: throw exception
		
		return llQueue.getFirst()
	
	public size(): int
		return size
		
	public isEmpty(): boolean
		return(size <= 0)
	
	/* Function toArray copies the contents of the queue into an array */
	public toArray(): Person[]		
		// Initialize new array sized at the queue size
		initialize Person[] personArray = Person[llQueue.size()]
		
		// Initialize iterator for queue
		initialize Iterator<Person> queueIter = llQueue.iterator()
		
		// Traverse linked list and populate array
		initialize int i = 0 // Array indexer
		while(queueIter.hasNext()):
			set personArray[i] = queueIter.next()
			set i = i + 1
		
		return personArray
	
	/* Function fromArray copies the contents of the passed array into the queue */
	public fromArray(personArray: Person[]): void
		// Iterate through array and populate a linked list
		initialize LinkedList<Person> tempQueue
		for (int i = 0; i < personArray.length; ++i):
			tempQueue.addLast(personArray[i])
		
		// Sets llQueue reference to tempQueue, replacing the contents
		set llQueue = tempQueue
	
/* Class: PersonMain */
class PersonMain:
	public static main(String[] args): void
		// Initialize queue of Person objects
		initialize PersonQueue personQueue
		
		// Initialize input array for 5 Person objects
		initialize Person[] personArray = Person[5]
		
		// Initialize scanner to read input (Java specific)
		Scanner scanner = new scanner(System.in)
		
		// Input loop
		for (int i = 0; i < personArray.length; ++i):
			Person person = new Person()
			person.setFirstName(readln("First name: "))
			person.setLastName(readln("Last name: "))
			person.setAge(readln("Age: "))
			
			personQueue.enqueue(person)
		
		// Inspect the current queue order
		personQueue.printQueue()
		
		// Sorting array
		initialize Person[] sortedArray
		
		// Sort the queue by Last name (descending)
		set sortedArray = QuickSort.quickSort(personQueue.toArray(), 0, personQueue.size() - 1, new LastNameDescendingComparator())
		personQueue.fromArray(sortedArray)
		personQueue.printQueue()
		
		// Sort the queue by Age (descending)
		set sortedArray = QuickSort.quickSort(personQueue.toArray(), 0, personQueue.size() - 1, new AgeDescendingComparator())
		personQueue.fromArray(sortedArray)
		personQueue.printQueue()
		
	
	
	
		
		